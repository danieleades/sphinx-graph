[project]
name = "sphinx-graph"
version = "0.2.4"
description = "'Sphinx-Graph' is a plain-text, VCS-friendly, requirements management tool."
authors = [{ name = "Daniel Eades", email = "danieleades@hotmail.com" }]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.9"
keywords = ["sphinx, requirements", "documentation", "plain-text"]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Topic :: Documentation",
    "Topic :: Documentation :: Sphinx",
    "Topic :: Utilities",
    "Topic :: Documentation",
    "Topic :: Utilities",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: Sphinx :: Extension",
    "Intended Audience :: Developers",
    "Intended Audience :: Manufacturing",
]

dependencies = [
    "rustworkx~=0.16.0",
    "sphinx>=6,<8; python_version < '3.10'",
    "sphinx>=6,<9; python_version >= '3.10'",
    "toml~=0.10.2",
]

[dependency-groups]
dev = [
    # testing
    "pytest~=8.0.0",
    "pytest-cov~=5.0.0",
    "defusedxml~=0.7.1",  # transitive dependency required by `sphinx.testing.fixtures`. See https://github.com/sphinx-doc/sphinx/issues/12339

    # docs
    "myst-parser>=3.0.1",
    "sphinx-rtd-theme~=2.0.0",

    # linting
    "mypy~=1.0.1",
    "pre-commit~=3.4.0",
    "types-docutils~=0.21",
    "types-toml~=0.10.8.5",
]

[project.urls]
Homepage = "https://github.com/danieleades/sphinx-graph"
Documentation = "https://sphinx-graph.readthedocs.io/en/latest/index.html"

[tool.mypy]
strict = true
show_error_codes = true
files = ["src", "tests"]
exclude = "tests/roots"
no_implicit_reexport = true

[tool.ruff]
lint.select = [
    "A",      # flake8-builtins
    "ANN",    # flake8-annotations
    "ARG",    # flake8-unused-arguments
    "ASYNC",  # flake8-async
    "B",      # flake8-bugbear
    "BLE",    # flake8-blind-except
    "C4",     # flake8-comprehensions
    "C90",    # cognitive complexity
    "COM",    # flake8-commas
    "D",      # pydocstyle
    "DTZ",    # flake8-datetimez
    "E",      # flake8 built-ins
    "EM",     # flake8-errmsg
    "ERA",    # flake8-eradicate
    "EXE",    # flake8-executable
    "F",      # flake8 built-ins
    "FA",     # flake8-future-annotations
    "FBT",    # boolean trap
    "FLY",    # flynt
    "FURB",   # refurb
    "G",      # flake8-logging-format
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "INT",    # flake8-gettext
    "ISC",    # implicit-str-concat
    "LOG",    # flake8-logging
    "N",      # pep8-naming
    "PERF",   # perflint
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PL",     # pylint
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "PYI",    # flake8-pyi
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "RSE",    # flake8-raise
    "RUF",    # Ruff-specific lints
    "S",      # flake8-bandit
    "SIM",    # flake8-simplify
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "T20",    # flake8-print
    "TCH",    # flake8-type-checking
    "TID252", # ban relative imports
    "TRY",    # tryceratops
    "UP",     # pyupgrade
    "W",      # flake8 built-ins
    "TRY",    # tryceratops
    "YTT",    # flake8-2020
]
lint.ignore = [
    "COM812", # ignore when using ruff-format
    "G004",   # Logging statement uses f-string
    "ISC001", # ignore when using ruff-format
]

lint.pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D100", # missing docstring in public module
    "D103", # missing docstring in public function
    "D104", # missing docstring in public package
    "S101", # use of 'assert' detected
]
"docs/conf.py" = ["A001", "D100"]

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
