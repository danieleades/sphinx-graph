[tool.poetry]
name = "sphinx-graph"
version = "0.2.2"
description = "'Sphinx-Graph' is a plain-text, VCS-friendly, requirements management tool."
authors = ["Daniel Eades <danieleades@hotmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/danieleades/sphinx-graph"
documentation = "https://sphinx-graph.readthedocs.io/en/latest/index.html"
keywords = ["sphinx, requirements", "documentation", "plain-text"]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Topic :: Documentation",
    "Topic :: Documentation :: Sphinx",
    "Topic :: Utilities",
    "Topic :: Documentation",
    "Topic :: Utilities",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Sphinx :: Extension",
    "Intended Audience :: Developers",
    "Intended Audience :: Manufacturing",
]


[tool.poetry.dependencies]
python = "^3.8.1"
sphinx = ">=6, <8"
networkx = "^3.0"
toml = "^0.10.2"


[tool.poetry.group.dev.dependencies]

# testing
pytest = "^7.2.0"
pytest-cov = "^4.0.0"

# typing
mypy = "^1.0.1"
types-docutils = "^0.20.0.0"
types-toml = "^0.10.8.5"

# linting
pre-commit = "^3.4.0"

[tool.poetry.group.doc]
optional = true

[tool.poetry.group.doc.dependencies]
sphinx-rtd-theme = "^2.0.0"


[tool.mypy]
strict = true
show_error_codes = true
files = "src,tests"
exclude = "tests/roots"
no_implicit_reexport = true

[[tool.mypy.overrides]]
module = ["networkx.*"]
ignore_missing_imports = true


[tool.ruff]
target-version = "py38"
select = [
    "A",      # flake8-builtins
    "ANN",    # flake8-annotations
    "ARG",    # flake8-unused-arguments
    "ASYNC",  # flake8-async
    "B",      # flake8-bugbear
    "BLE",    # flake8-blind-except
    "C4",     # flake8-comprehensions
    "C90",    # cognitive complexity
    "COM",    # flake8-commas
    "D",      # pydocstyle
    "DTZ",    # flake8-datetimez
    "E",      # flake8 built-ins
    "EM",     # flake8-errmsg
    "ERA",    # flake8-eradicate
    "F",      # flake8 built-ins
    "FA",     # flake8-future-annotations
    "FBT",    # boolean trap
    "FURB",   # refurb
    "G",      # flake8-logging-format
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "ISC",    # implicit-str-concat
    "N",      # pep8-naming
    "PERF",    # perflint
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PLC",    # pylint
    "PLE",    # pylint
    "PLR",    # pylint
    "PLW",    # pylint
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "PYI",    # flake8-pyi
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "RSE",    # flake8-raise
    "RUF",    # Ruff-specific lints
    "S",      # flake8-bandit
    "SIM",    # flake8-simplify
    "SLF",    # flake8-self
    "T20",    # flake8-print
    "TID252", # ban relative imports
    "UP",     # pyupgrade
    "W",      # flake8 built-ins
    "TRY",    # tryceratops
    "YTT",    # flake8-2020
]
ignore = [
    "ANN101", # missing type annotation for 'self' in method
    "ANN102", # missing type annotation for 'cls' in method
    "G004",   # Logging statement uses f-string
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"tests/*" = ["A001", "A002", "D100", "D103", "D104", "FBT001", "S101"]
"docs/conf.py" = ["A001", "D100"]

[tool.ruff.isort]
known-first-party = ["sphinx_graph"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
